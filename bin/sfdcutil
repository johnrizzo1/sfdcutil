#!/usr/bin/env ruby

require 'sfdcutil'
require 'optparse'
require 'ostruct'
require 'pp'

class SFDCUtilParser
  def self.parse(args)
    options = OpenStruct.new
    options.verbose = false
    options.url = nil
    options.instance = nil
    script_name = File.basename($0)

    opts = OptionParser.new do |opts|
      opts.banner = "Usage: " + script_name + " COMMAND [OPTIONS]"
      opts.separator ""

      opts.separator "Commands"
      opts.separator "     trust:status - get the status of all instances"

      opts.separator ""
      opts.separator "Options"

      opts.on("-u", "--url URL", "trust URL") do |url|
        options.url = url
      end

      opts.on("-i", "--instance INSTANCE", "which instance do you want to get the status of") do |instance|
        options.instance = instance
      end

      opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
        options.verbose = v
      end

      opts.on("-h", "--help", "help") do
        puts opts
      end
    end

    opts.parse!(args)
    options.opts = opts

    options
  end
end

options = SFDCUtilParser.parse(ARGV)
def colorize(text, color_code)
  "\e[#{color_code}m#{text}\e[0m"
end

def red(text);     colorize(text, 31) end
def green(text);   colorize(text, 32) end
def yellow(text);  colorize(text, 33) end
def blue(text);    colorize(text, 34) end
def magenta(text); colorize(text, 35) end

case ARGV[0]
  when "trust:status"
    if options.url != nil
      trust = SFDCUtil::Trust.new(url)
    else
      trust = SFDCUtil::Trust.new
    end

    if options.instance != nil
      instances = trust.get_status(options.instance)
    else
      instances = trust.get_all_status
    end

    puts sprintf("%12s %s", "Instance", "Status")
    instances.each do |instance|
      if instance[:status] == "Instance available"
        puts green("%12s %s" % [instance[:instance], instance[:status]])
      elsif instance[:status] == "Performance issues"
        puts yellow(sprintf("%12s %s", instance[:instance], instance[:status]))
      elsif instance[:status] == "Service disruption"
        puts red(sprintf("%12s %s", instance[:instance], instance[:status]))
      elsif instance[:status] == "Informational message"
        puts blue(sprintf("%12s %s", instance[:instance], instance[:status]))
      elsif instance[:status] == "Status not available"
        puts magenta(sprintf("%12s %s", instance[:instance], instance[:status]))
      else
        puts red(sprintf("%12s %s", instance[:instance], instance[:status]))
      end
    end
  else
    puts options.opts
end

